{
  "name": "Complete Automated Calendar Sync",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * *"
            }
          ]
        }
      },
      "name": "Schedule: Daily 6AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [250, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "calendar",
        "operation": "getAll",
        "calendar": "primary",
        "returnAll": false,
        "limit": 100,
        "options": {
          "timeMin": "={{$now.toISO()}}",
          "timeMax": "={{$now.plus({days: 7}).toISO()}}",
          "singleEvents": true,
          "orderBy": "startTime"
        }
      },
      "name": "Google Calendar",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "const internalDomains = 'gmail.com,googlemail.com'.split(',');\nconst items = $input.all();\n\nreturn items.map(item => {\n  const event = item.json;\n  const attendees = (event.attendees || []).map(a => ({\n    email: a.email,\n    name: a.displayName || a.email.split('@')[0],\n    response: a.responseStatus || 'needsAction',\n    is_organizer: a.organizer || false,\n    domain: a.email.split('@')[1]\n  }));\n  \n  const externalAttendees = attendees.filter(a => \n    !internalDomains.includes(a.domain.toLowerCase())\n  );\n  \n  const start = new Date(event.start?.dateTime || event.start?.date);\n  const end = new Date(event.end?.dateTime || event.end?.date);\n  const durationMinutes = (end - start) / 1000 / 60;\n  \n  return {\n    json: {\n      event_id: event.id,\n      summary: event.summary || 'No Title',\n      description: event.description || '',\n      start_time: event.start?.dateTime || event.start?.date,\n      end_time: event.end?.dateTime || event.end?.date,\n      location: event.location || '',\n      meeting_url: event.hangoutLink || '',\n      organizer_email: event.organizer?.email || '',\n      attendees: JSON.stringify(attendees),\n      external_attendees: JSON.stringify(externalAttendees),\n      has_external_attendees: externalAttendees.length > 0,\n      external_count: externalAttendees.length,\n      duration_minutes: durationMinutes,\n      is_important: durationMinutes >= 30 && externalAttendees.length > 0,\n      status: event.status || 'confirmed',\n      synced_at: new Date().toISOString()\n    }\n  };\n});"
      },
      "name": "Format & Detect External",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dpqsipbppdemgfwuihjr.supabase.co/rest/v1/calendar_events",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRwcXNpcGJwcGRlbWdmd3VpaGpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgzNzIzMzksImV4cCI6MjA3Mzk0ODMzOX0.Ke1gylvBOHU3XukM_IeQS3K9yM719qhgDbaqzDupy_Y"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRwcXNpcGJwcGRlbWdmd3VpaGpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgzNzIzMzksImV4cCI6MjA3Mzk0ODMzOX0.Ke1gylvBOHU3XukM_IeQS3K9yM719qhgDbaqzDupy_Y"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "resolution=merge-duplicates"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "body": "={{ JSON.stringify($json) }}"
      },
      "name": "Supabase: Upsert Event",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.has_external_attendees }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Has External Attendees?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "Schedule: Daily 6AM": {
      "main": [[{"node": "Google Calendar", "type": "main", "index": 0}]]
    },
    "Google Calendar": {
      "main": [[{"node": "Format & Detect External", "type": "main", "index": 0}]]
    },
    "Format & Detect External": {
      "main": [[{"node": "Supabase: Upsert Event", "type": "main", "index": 0}]]
    },
    "Supabase: Upsert Event": {
      "main": [[{"node": "Has External Attendees?", "type": "main", "index": 0}]]
    }
  }
}
