{
  "name": "Secured Calendar Sync with AI Analysis",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * *"
            }
          ]
        }
      },
      "name": "Schedule: Daily 6AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [256, 304],
      "id": "schedule"
    },
    {
      "parameters": {
        "calendar": "primary",
        "start": "={{$now.toISO()}}",
        "end": "={{$now.plus({days: 7}).toISO()}}",
        "options": {
          "maxResults": 100,
          "singleEvents": true,
          "orderBy": "startTime"
        }
      },
      "name": "Google Calendar",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [464, 304],
      "id": "googleCalendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "YOUR_GOOGLE_CREDENTIAL_ID",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// セキュアな実装: 環境変数から内部ドメインを取得\nconst internalDomains = (process.env.INTERNAL_DOMAINS || 'gmail.com,googlemail.com').split(',');\nconst items = $input.all();\n\nreturn items.map(item => {\n  const event = item.json;\n  const attendees = (event.attendees || []).map(a => ({\n    email: a.email,\n    name: a.displayName || a.email.split('@')[0],\n    response: a.responseStatus || 'needsAction',\n    is_organizer: a.organizer || false,\n    domain: a.email.split('@')[1]\n  }));\n  \n  const externalAttendees = attendees.filter(a => \n    !internalDomains.includes(a.domain.toLowerCase())\n  );\n  \n  const start = new Date(event.start?.dateTime || event.start?.date);\n  const end = new Date(event.end?.dateTime || event.end?.date);\n  const durationMinutes = (end - start) / 1000 / 60;\n  \n  return {\n    json: {\n      event_id: event.id,\n      summary: event.summary || 'No Title',\n      description: event.description || '',\n      start_time: event.start?.dateTime || event.start?.date,\n      end_time: event.end?.dateTime || event.end?.date,\n      location: event.location || '',\n      meeting_url: event.hangoutLink || '',\n      organizer_email: event.organizer?.email || '',\n      attendees: attendees,\n      external_attendees: externalAttendees,\n      has_external_attendees: externalAttendees.length > 0,\n      external_count: externalAttendees.length,\n      duration_minutes: durationMinutes,\n      is_important: durationMinutes >= 30 && externalAttendees.length > 0,\n      status: event.status || 'confirmed',\n      synced_at: new Date().toISOString()\n    }\n  };\n});"
      },
      "name": "Format & Detect External",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [656, 304],
      "id": "formatData"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "calendar_events",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "event_id": "={{ $json.event_id }}",
            "summary": "={{ $json.summary }}",
            "description": "={{ $json.description }}",
            "start_time": "={{ $json.start_time }}",
            "end_time": "={{ $json.end_time }}",
            "location": "={{ $json.location }}",
            "meeting_url": "={{ $json.meeting_url }}",
            "attendees": "={{ JSON.stringify($json.attendees) }}",
            "external_attendees": "={{ JSON.stringify($json.external_attendees) }}",
            "has_external_attendees": "={{ $json.has_external_attendees }}",
            "external_count": "={{ $json.external_count }}",
            "duration_minutes": "={{ $json.duration_minutes }}",
            "is_important": "={{ $json.is_important }}",
            "synced_at": "={{ $json.synced_at }}"
          }
        },
        "options": {
          "onConflict": "event_id",
          "conflictHandling": "update"
        }
      },
      "name": "Supabase: Save Events",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [864, 304],
      "id": "saveToSupabase",
      "credentials": {
        "supabaseApi": {
          "id": "YOUR_SUPABASE_CREDENTIAL_ID",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.has_external_attendees }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Has External Attendees?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1056, 304],
      "id": "checkExternal"
    },
    {
      "parameters": {
        "jsCode": "// 外部参加者がいる場合の処理\nconst meetingData = $json;\nconst externalAttendees = meetingData.external_attendees || [];\n\nconst companies = {};\nexternalAttendees.forEach(attendee => {\n  const domain = attendee.domain;\n  if (!companies[domain]) {\n    companies[domain] = {\n      domain: domain,\n      company_name: domain.replace(/\\.(com|co\\.jp|jp|net|org)$/, ''),\n      attendees: []\n    };\n  }\n  companies[domain].attendees.push(attendee);\n});\n\nconst companyList = Object.values(companies);\n\nreturn companyList.map(company => ({\n  json: {\n    event_id: meetingData.event_id,\n    summary: meetingData.summary,\n    start_time: meetingData.start_time,\n    company_domain: company.domain,\n    company_name: company.company_name,\n    attendees_from_company: company.attendees,\n    search_query: `${company.company_name} 企業情報 事業内容`,\n    context: {\n      meeting_title: meetingData.summary,\n      meeting_time: meetingData.start_time,\n      company: company.company_name,\n      attendees: company.attendees.map(a => a.name)\n    }\n  }\n}));"
      },
      "name": "Prepare AI Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1248, 200],
      "id": "prepareAITask"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=会議情報：\nタイトル: {{ $json.summary }}\n開始時刻: {{ $json.start_time }}\n企業名: {{ $json.company_name }}\n参加者: {{ $json.attendees_from_company.map(a => a.name).join(', ') }}\n\nこの企業に対して以下の4つの観点から具体的な提案を作成してください：\n\n1. **業務効率化ツール**: 業界に最適なツールを具体的に提案\n2. **ホームページ改善**: デザイン、機能、SEOの観点から\n3. **チャットボット導入**: カスタマーサポートや営業支援\n4. **AI活用提案**: 業務プロセスの自動化や分析\n\n各提案には以下を含めてください：\n- 導入メリット（3つ）\n- 想定コスト（概算）\n- 導入期間\n- 具体的な製品・サービス名\n\nJSON形式で構造化して返してください。",
        "options": {
          "systemMessage": "あなたは企業のDX推進を支援するビジネスコンサルタントです。具体的で実行可能な提案を、数値やコストを含めて提供してください。",
          "maxIterations": 5
        }
      },
      "name": "AI Agent: Generate Proposal",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [1456, 200],
      "id": "aiAgent"
    },
    {
      "parameters": {
        "model": "gpt-4-turbo-preview",
        "options": {
          "maxTokens": 2000,
          "temperature": 0.7
        }
      },
      "name": "OpenAI GPT-4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [1456, 400],
      "id": "openAIModel",
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// AI出力を安全に整形\nconst aiOutput = $json.output || '';\nconst originalData = $node['Prepare AI Analysis'].json;\n\nlet parsedOutput;\ntry {\n  // JSON形式の出力をパース\n  const jsonMatch = aiOutput.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    parsedOutput = JSON.parse(jsonMatch[0]);\n  } else {\n    parsedOutput = { raw_output: aiOutput };\n  }\n} catch (e) {\n  console.error('Failed to parse AI output:', e);\n  parsedOutput = { \n    error: 'Parse failed',\n    raw_output: aiOutput \n  };\n}\n\nreturn [{\n  json: {\n    event_id: originalData.event_id,\n    company_domain: originalData.company_domain,\n    company_name: originalData.company_name,\n    company_analysis: parsedOutput.company_analysis || '',\n    proposal_content: JSON.stringify(parsedOutput.proposals || parsedOutput),\n    metadata: {\n      ai_model: 'gpt-4-turbo-preview',\n      generated_at: new Date().toISOString(),\n      meeting_title: originalData.summary\n    },\n    status: 'generated'\n  }\n}];"
      },
      "name": "Format AI Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1664, 200],
      "id": "formatAIOutput"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "proposals",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "event_id": "={{ $json.event_id }}",
            "company_domain": "={{ $json.company_domain }}",
            "company_name": "={{ $json.company_name }}",
            "company_analysis": "={{ $json.company_analysis }}",
            "proposal_content": "={{ $json.proposal_content }}",
            "status": "={{ $json.status }}",
            "generated_at": "={{ $json.metadata.generated_at }}"
          }
        }
      },
      "name": "Supabase: Save Proposal",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1872, 200],
      "id": "saveProposal",
      "credentials": {
        "supabaseApi": {
          "id": "YOUR_SUPABASE_CREDENTIAL_ID",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 内部会議の場合の簡易サマリー\nconst meetingData = $json;\n\nreturn [{\n  json: {\n    event_id: meetingData.event_id,\n    company_domain: 'internal',\n    company_name: '社内会議',\n    company_analysis: `会議タイトル: ${meetingData.summary}`,\n    proposal_content: JSON.stringify({\n      type: 'internal_meeting',\n      summary: meetingData.summary,\n      preparation: [\n        '議題の確認',\n        '関連資料の準備',\n        '参加者への事前共有'\n      ]\n    }),\n    status: 'internal',\n    generated_at: new Date().toISOString()\n  }\n}];"
      },
      "name": "Internal Meeting Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1248, 408],
      "id": "internalSummary"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "proposals",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "event_id": "={{ $json.event_id }}",
            "company_domain": "={{ $json.company_domain }}",
            "company_name": "={{ $json.company_name }}",
            "company_analysis": "={{ $json.company_analysis }}",
            "proposal_content": "={{ $json.proposal_content }}",
            "status": "={{ $json.status }}",
            "generated_at": "={{ $json.generated_at }}"
          }
        }
      },
      "name": "Supabase: Save Internal",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1456, 408],
      "id": "saveInternal",
      "credentials": {
        "supabaseApi": {
          "id": "YOUR_SUPABASE_CREDENTIAL_ID",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Calendar sync and AI analysis completed"
            }
          ],
          "number": [
            {
              "name": "events_processed",
              "value": "={{ $items('Supabase: Save Events').length }}"
            },
            {
              "name": "proposals_generated",
              "value": "={{ $items('Supabase: Save Proposal').length + $items('Supabase: Save Internal').length }}"
            }
          ]
        }
      },
      "name": "Execution Summary",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [2080, 304],
      "id": "summary"
    }
  ],
  "connections": {
    "Schedule: Daily 6AM": {
      "main": [[{"node": "Google Calendar", "type": "main", "index": 0}]]
    },
    "Google Calendar": {
      "main": [[{"node": "Format & Detect External", "type": "main", "index": 0}]]
    },
    "Format & Detect External": {
      "main": [[{"node": "Supabase: Save Events", "type": "main", "index": 0}]]
    },
    "Supabase: Save Events": {
      "main": [[{"node": "Has External Attendees?", "type": "main", "index": 0}]]
    },
    "Has External Attendees?": {
      "main": [
        [{"node": "Prepare AI Analysis", "type": "main", "index": 0}],
        [{"node": "Internal Meeting Summary", "type": "main", "index": 0}]
      ]
    },
    "Prepare AI Analysis": {
      "main": [[{"node": "AI Agent: Generate Proposal", "type": "main", "index": 0}]]
    },
    "AI Agent: Generate Proposal": {
      "main": [[{"node": "Format AI Output", "type": "main", "index": 0}]]
    },
    "OpenAI GPT-4": {
      "ai_languageModel": [[{"node": "AI Agent: Generate Proposal", "type": "ai_languageModel", "index": 0}]]
    },
    "Format AI Output": {
      "main": [[{"node": "Supabase: Save Proposal", "type": "main", "index": 0}]]
    },
    "Supabase: Save Proposal": {
      "main": [[{"node": "Execution Summary", "type": "main", "index": 0}]]
    },
    "Internal Meeting Summary": {
      "main": [[{"node": "Supabase: Save Internal", "type": "main", "index": 0}]]
    },
    "Supabase: Save Internal": {
      "main": [[{"node": "Execution Summary", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-18T00:00:00.000Z",
  "versionId": "1"
}
